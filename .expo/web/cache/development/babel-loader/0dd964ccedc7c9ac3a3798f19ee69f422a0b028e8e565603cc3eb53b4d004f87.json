{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useEffect, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TIME_IN_MS_INTRO = 2000;\nvar SplashScreen = function SplashScreen() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isWaiting = _useState2[0],\n    setIsWaiting = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loggedIn = _useState4[0],\n    setLoggedIn = _useState4[1];\n  var navigation = useNavigation();\n  useEffect(function () {\n    var timeoutId = setTimeout(function () {\n      setIsWaiting(false);\n    }, 1000);\n    var random = Math.random();\n    if (random < 0.5) {\n      setLoggedIn(true);\n    } else {\n      setLoggedIn(false);\n    }\n    return function () {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  useEffect(function () {\n    if (isWaiting) {\n      return;\n    }\n    if (loggedIn) {\n      navigation.navigate(\"Main\", {});\n    } else {\n      navigation.navigate(\"Login\", {});\n    }\n  }, [loggedIn, isWaiting]);\n  return _jsx(SafeAreaView, {\n    style: {\n      display: \"flex\",\n      flex: 1,\n      justifyContent: \"center\",\n      alignContent: \"center\",\n      backgroundColor: \"#3096E5\"\n    },\n    children: _jsx(Animated.View, {\n      children: _jsx(ImageBackground, {\n        style: {\n          width: 250,\n          height: 200,\n          flex: 1,\n          justifyContent: \"center\",\n          alignContent: \"center\"\n        },\n        source: require(\"../assets/LogoApp.png\")\n      })\n    })\n  });\n};\nexport default SplashScreen;","map":{"version":3,"names":["SafeAreaView","Animated","useEffect","useState","useNavigation","jsx","_jsx","TIME_IN_MS_INTRO","SplashScreen","_useState","_useState2","_slicedToArray","isWaiting","setIsWaiting","_useState3","_useState4","loggedIn","setLoggedIn","navigation","timeoutId","setTimeout","random","Math","clearTimeout","navigate","style","display","flex","justifyContent","alignContent","backgroundColor","children","View","ImageBackground","width","height","source","require"],"sources":["C:/Users/PC-03/Desktop/React_Native/ClassNet-School-App/components/SplashScreen.jsx"],"sourcesContent":["import { ImageBackground } from 'react-native'\r\nimport { SafeAreaView } from 'react-native-safe-area-context'\r\nimport { Animated } from 'react-native'\r\nimport { useEffect, useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst TIME_IN_MS_INTRO = 2000;\r\n\r\nconst SplashScreen = () => {\r\n  const [isWaiting, setIsWaiting] = useState(true)\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      setIsWaiting(false);\r\n    }, 1000)\r\n\r\n    const random = Math.random();\r\n\r\n    if (random < 0.5) {\r\n      setLoggedIn(true)\r\n    } else {\r\n      setLoggedIn(false)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isWaiting) {\r\n      return\r\n    }\r\n\r\n    if(loggedIn) {\r\n      navigation.navigate(\"Main\", {})\r\n    } else {\r\n      navigation.navigate(\"Login\", {})\r\n    }\r\n  }, [loggedIn, isWaiting])\r\n\r\n  return (\r\n    <SafeAreaView style={{display: \"flex\", flex: 1, justifyContent: \"center\", alignContent: \"center\", backgroundColor: \"#3096E5\"}}>\r\n      <Animated.View>\r\n        <ImageBackground style={{width: 250, height: 200, flex: 1, justifyContent: \"center\", alignContent: \"center\"}} source={require(\"../assets/LogoApp.png\")}>\r\n\r\n        </ImageBackground>\r\n      </Animated.View>\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nexport default SplashScreen"],"mappings":";;AACA,SAASA,YAAY,QAAQ,gCAAgC;AAAA,OAAAC,QAAA;AAE7D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEzD,IAAMC,gBAAgB,GAAG,IAAI;AAE7B,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAAC,SAAA,GAAkCN,QAAQ,CAAC,IAAI,CAAC;IAAAO,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAAgCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAxCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,UAAU,GAAGd,aAAa,CAAC,CAAC;EAElCF,SAAS,CAAC,YAAM;IACd,IAAMiB,SAAS,GAAGC,UAAU,CAAC,YAAM;MACjCP,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;IAER,IAAMQ,MAAM,GAAGC,IAAI,CAACD,MAAM,CAAC,CAAC;IAE5B,IAAIA,MAAM,GAAG,GAAG,EAAE;MAChBJ,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,MAAM;MACLA,WAAW,CAAC,KAAK,CAAC;IACpB;IAEA,OAAO,YAAM;MACXM,YAAY,CAACJ,SAAS,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,YAAM;IACd,IAAIU,SAAS,EAAE;MACb;IACF;IAEA,IAAGI,QAAQ,EAAE;MACXE,UAAU,CAACM,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC,MAAM;MACLN,UAAU,CAACM,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,CAACR,QAAQ,EAAEJ,SAAS,CAAC,CAAC;EAEzB,OACEN,IAAA,CAACN,YAAY;IAACyB,KAAK,EAAE;MAACC,OAAO,EAAE,MAAM;MAAEC,IAAI,EAAE,CAAC;MAAEC,cAAc,EAAE,QAAQ;MAAEC,YAAY,EAAE,QAAQ;MAAEC,eAAe,EAAE;IAAS,CAAE;IAAAC,QAAA,EAC5HzB,IAAA,CAACL,QAAQ,CAAC+B,IAAI;MAAAD,QAAA,EACZzB,IAAA,CAAC2B,eAAe;QAACR,KAAK,EAAE;UAACS,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE,GAAG;UAAER,IAAI,EAAE,CAAC;UAAEC,cAAc,EAAE,QAAQ;UAAEC,YAAY,EAAE;QAAQ,CAAE;QAACO,MAAM,EAAEC,OAAO,wBAAwB;MAAE,CAEtI;IAAC,CACL;EAAC,CACJ,CAAC;AAEnB,CAAC;AAED,eAAe7B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}